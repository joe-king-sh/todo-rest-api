openapi: 3.0.0
info:
  description: Todoリストを管理するREST API
  title: TodoApp REST API
  version: 1.0.0
  contact:
    name: API Support
    url: 'https://twitter.com/joe_king_sh'
  license:
    name: MIT
    url: 'https://opensource.org/licenses/mit-license.php'
servers:
  - url: 'https://$API_ID.execute-api.ap-northeast-1.amazonaws.com/dev'
    description: ''
components:
  securitySchemes:
    CognitoAuth:
      type: apiKey
      name: Authorization
      in: header
      x-amazon-apigateway-authtype: cognito_user_pools
      x-amazon-apigateway-authorizer:
        providerARNs:
          - >-
            arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${Token[TOKEN.729]}
        type: cognito_user_pools
  schemas:
    Todo:
      type: object
      properties:
        userId:
          type: string
        todoId:
          type: string
        title:
          type: string
        content:
          type: string
        updatedDate:
          type: string
    Error:
      type: object
      required:
        - message
      properties:
        message:
          type: string
  examples:
    ErrorExample:
      summary: Todo情報 エラー例(Unexpected)
      value:
        message: 予期せぬエラーが発生しました
    ErrorNotFoundExample:
      summary: Todo情報 エラー例(Not Found)
      value:
        message: 指定したTodoは見つかりませんでした
    TodoId:
      summary: TodoId 指定例
      value: 111aac0e-eb29-41c3-b377-05e14102942d
paths:
  /auth/token:
    post:
      operationId: createToken
      tags:
        - Auth
      summary: 認証トークン発行API
      description: APIにアクセスするためのIDトークンを発行する
      security: []
      requestBody:
        description: 認証情報
        content:
          application/json:
            schema:
              type: object
              required:
                - userId
                - password
              properties:
                userId:
                  type: string
                password:
                  type: string
            examples:
              Todo:
                summary: 認証情報 例
                value:
                  userId: my-user-id
                  password: my-password
      responses:
        '200':
          description: 認証成功 トークンを発行する
          content:
            application/json:
              schema:
                type: object
                required:
                  - idToken
                properties:
                  idToken:
                    type: string
              examples:
                Todo:
                  summary: 認証結果 トークン発行の例
                  value:
                    idToken: eyJraWQiOiJpV3RidzNaXC9WbFVyUWhCaGp..(省略)
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
        default:
          description: 予期せぬエラーが発生
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                unexpected:
                  $ref: '#/components/examples/ErrorExample'
      x-amazon-apigateway-integration:
        uri: >-
          arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:${Token[TOKEN.901]}/invocations
        responses:
          default:
            statusCode: '200'
            responses:
              default:
                statusCode: '200'
                responseParameters:
                  method.response.header.Access-Control-Allow-Headers: '''*'''
                  method.response.header.Access-Control-Allow-Methods: '''*'''
                  method.response.header.Access-Control-Allow-Origin: '''*'''
                responseTemplates:
                  application/json: '{}'
        passthroughBehavior: when_no_match
        httpMethod: POST
        contentHandling: CONVERT_TO_TEXT
        type: aws_proxy
    options:
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      tags:
        - CORS
      responses:
        '200':
          description: Default response for CORS method
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content: {}
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: '{"statusCode" : 200}'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''*'''
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: '{}'
  /todos:
    get:
      operationId: findTodos
      tags:
        - Todo
      summary: Todo情報 検索API
      description: 指定したワードでTodoを検索し返却する
      security:
        - CognitoAuth: []
      parameters:
        - name: q
          in: query
          description: 指定したワードで、Todoのタイトル、内容を全文検索する
          required: false
          schema:
            type: string
          examples:
            q:
              summary: 検索指定ワード例
              value: 実装
        - name: size
          in: query
          description: 検索するワードのサイズ
          required: false
          schema:
            type: number
          examples:
            size:
              summary: サイズ指定例
              value: 2
        - name: from
          in: query
          description: 読み込み開始位置指定
          required: false
          schema:
            type: number
          examples:
            size:
              summary: 読み込み開始位置指定例
              value: 2
      responses:
        '200':
          description: 全体の件数、取得したTodo情報、次回読み込み開始位置を返却する
          content:
            application/json:
              schema:
                type: object
                properties:
                  totalCount:
                    type: number
                  todos:
                    type: array
                    items:
                      $ref: '#/components/schemas/Todo'
                  nextStartKey:
                    type: number
              examples:
                listTodo:
                  summary: Todo情報 検索結果例
                  value:
                    totalCount: 9
                    todos:
                      - todoId: 3894bd64-3061-4fa5-914a-b798b5f56bb9
                        title: 今日のうちに終わらせること
                        content: swaggerの定義を実装する
                      - todoId: 933b923b-3238-4ec1-b3fb-1164e897d690
                        title: 明日朝起きたらやること
                        content: DynamodbをCDKで立てる
                    nextStartKey: 2
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
        default:
          description: 予期せぬエラーが発生
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                unexpected:
                  $ref: '#/components/examples/ErrorExample'
      x-amazon-apigateway-integration:
        uri: >-
          arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:${Token[TOKEN.797]}/invocations
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''*'''
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: '{}'
        passthroughBehavior: when_no_match
        httpMethod: POST
        contentHandling: CONVERT_TO_TEXT
        type: aws_proxy
    post:
      operationId: putTodos
      tags:
        - Todo
      summary: Todo情報 登録API
      description: ユーザーのTodo情報を1件登録する
      security:
        - CognitoAuth: []
      requestBody:
        description: 登録するTodo情報
        content:
          application/json:
            schema:
              type: object
              required:
                - title
                - content
              properties:
                title:
                  type: string
                content:
                  type: string
            examples:
              Todo:
                summary: Todo情報 登録例
                value:
                  title: 今日やること
                  content: ゴミを捨てる
      responses:
        '200':
          description: Todo情報の登録が正常に完了
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Todo'
              examples:
                Todo:
                  summary: Todo情報 登録例
                  value:
                    todoId: a5d93e28-180f-404e-b6fe-29972ca4b73c
                    title: 今日やること
                    content: ゴミを捨てる
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
        default:
          description: 予期せぬエラーが発生
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                unexpected:
                  $ref: '#/components/examples/ErrorExample'
      x-amazon-apigateway-integration:
        uri: >-
          arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:${Token[TOKEN.771]}/invocations
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''*'''
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: '{}'
        passthroughBehavior: when_no_match
        httpMethod: POST
        contentHandling: CONVERT_TO_TEXT
        type: aws_proxy
    options:
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      tags:
        - CORS
      responses:
        '200':
          description: Default response for CORS method
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content: {}
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: '{"statusCode" : 200}'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''*'''
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: '{}'
  '/todos/{todoId}':
    get:
      operationId: showTodoById
      tags:
        - Todo
      summary: Todo情報 取得API
      description: ユーザーの指定したTodoを1件取得する
      security:
        - CognitoAuth: []
      parameters:
        - name: todoId
          in: path
          description: 取得するTodoのIdを指定する
          required: true
          schema:
            type: string
          examples:
            todoId:
              $ref: '#/components/examples/TodoId'
      responses:
        '200':
          description: Todoを正常に取得完了
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Todo'
              examples:
                getTodo:
                  summary: Todo情報 1件取得結果例
                  value:
                    todoId: 111aac0e-eb29-41c3-b377-05e14102942d
                    title: 冷蔵庫の整理
                    content: 卵と納豆を食べる
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
        '404':
          description: 指定したTodoIdが存在しない
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                TodoNotFound:
                  $ref: '#/components/examples/ErrorNotFoundExample'
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
        default:
          description: 予期せぬエラーが発生
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                unexpected:
                  $ref: '#/components/examples/ErrorExample'
      x-amazon-apigateway-integration:
        uri: >-
          arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:${Token[TOKEN.823]}/invocations
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''*'''
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: '{}'
        passthroughBehavior: when_no_match
        httpMethod: POST
        contentHandling: CONVERT_TO_TEXT
        type: aws_proxy
    put:
      operationId: updateTodo
      tags:
        - Todo
      summary: Todo情報 更新API
      description: ユーザーのTodo情報を1件更新する
      security:
        - CognitoAuth: []
      parameters:
        - name: todoId
          in: path
          description: 更新するTodoのIdを指定する
          required: true
          schema:
            type: string
          examples:
            todoId:
              $ref: '#/components/examples/TodoId'
      requestBody:
        description: 指定した値で登録されているTodoを更新する
        content:
          application/json:
            schema:
              type: object
              required:
                - title
                - content
              properties:
                title:
                  type: string
                content:
                  type: string
            examples:
              Todo:
                summary: Todo情報 更新例
                value:
                  title: new title
                  content: new content
      responses:
        '200':
          description: Todo情報の更新が正常に完了
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Todo'
              examples:
                updateTodo:
                  summary: Todo情報 更新結果例
                  value:
                    todoId: 111aac0e-eb29-41c3-b377-05e14102942d
                    title: 冷蔵庫の整理
                    content: 卵と納豆を食べる
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
        '404':
          description: 指定したTodoIdが存在しない
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                TodoNotFound:
                  $ref: '#/components/examples/ErrorNotFoundExample'
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
        default:
          description: 予期せぬエラーが発生
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                unexpected:
                  $ref: '#/components/examples/ErrorExample'
      x-amazon-apigateway-integration:
        uri: >-
          arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:${Token[TOKEN.771]}/invocations
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''*'''
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: '{}'
        passthroughBehavior: when_no_match
        httpMethod: POST
        contentHandling: CONVERT_TO_TEXT
        type: aws_proxy
    delete:
      operationId: deleteTodoById
      tags:
        - Todo
      summary: Todo情報 削除API
      description: ユーザーの指定したTodoを1件削除する
      security:
        - CognitoAuth: []
      parameters:
        - name: todoId
          in: path
          description: 削除するTodoのIdを指定する
          required: true
          schema:
            type: string
          examples:
            todoId:
              $ref: '#/components/examples/TodoId'
      responses:
        '200':
          description: Todoを正常に削除完了
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
        '404':
          description: 指定したTodoIdが存在しない
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                TodoNotFound:
                  $ref: '#/components/examples/ErrorNotFoundExample'
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
        default:
          description: 予期せぬエラーが発生
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                unexpected:
                  $ref: '#/components/examples/ErrorExample'
      x-amazon-apigateway-integration:
        uri: >-
          arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:${Token[TOKEN.849]}/invocations
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''*'''
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: '{}'
        passthroughBehavior: when_no_match
        httpMethod: POST
        contentHandling: CONVERT_TO_TEXT
        type: aws_proxy
    options:
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      tags:
        - CORS
      responses:
        '200':
          description: Default response for CORS method
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content: {}
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: '{"statusCode" : 200}'
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''*'''
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: '{}'
